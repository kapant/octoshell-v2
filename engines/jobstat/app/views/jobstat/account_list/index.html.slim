- @finish_states={'COMPLETED'=>'far fa-grin-beam','NODE_FAIL'=>'far fa-grimace','FAILED'=>'far fa-frown','CANCELLED'=>'far fa-meh-rolling-eyes','TIMEOUT'=>'far fa-flushed'}

// pass ruby variables to js
- group_plus = @rules_plus['groups']
- def_icon = {'icon'=>'far fa-exclamation-triangle', 'color'=>'color-regular'}

h3 id="intro-step1"
  = t('.finished_tasks')

p = t('.intro_start')

= render "form"

div class='thanks' id='thanks_box'
  div &nbsp;
  div class="thanks-text"
    = t('.thank_you')
  div &nbsp;

- if @notice
  p style = 'color:#FF0000;' = @notice

div
  p id="intro-step3"
    |
  /p
    = t('.info_1')
    | &nbsp;
    i class="fas fa-bars"
    | &nbsp;
    = t('.info_2')
  /p = t('.info_3')
  /p 
    = t('.info_4')
    a href='all_rules' = t('.this_page')
    |.
  /p 
    = t('.any_questions')
    /a href='mailto://feedback-octoshell@parallel.ru' e-mail
    /= t('.ticket_better')
    a href="/support/tickets/new" = t('.here')
div
  button class="btn btn-default" onClick="$('#mass_notok').addClass('target'); multi_job_feedback_start()"
      = t('.i_dont_agree')
  |  
  | &nbsp;&nbsp;&nbsp;
  button class="btn btn-default" onClick="window.open('all_rules','_self')"
      = t('.rules_list')
  |  
  | &nbsp;&nbsp;&nbsp;
  button class="btn btn-default" onClick="window.open('/support/tickets/new')"
      = t('.questions')
  |  
  | &nbsp;&nbsp;&nbsp;
  button class="btn btn-default" onClick="window.open('/wiki/pages/27-efficiency')"
      = t('.support')
  |  
  | &nbsp;&nbsp;&nbsp;
  div id="mass_notok" class='roll-down col-12 gray-round-background'
    p = t('.disagree_info')

    div id="disagree_rules" class="feedback_list col-12"
      = t('.no_rules')

    button onclick="$('#mass_notok_confirm').addClass('target')"
      = t('.send_feedback')
    button onclick="$('#mass_notok').removeClass('target'); restore_disagree();"
      = t('.dont_send_feedback')

    div id="mass_notok_confirm" class="octo-popup"
      = t('jobstat.common.why_dont_agree')
      input type='text' id='disagree_reason' style="right: 0px; width: 99%"
      div class="centered"
        button class="btn-info" onClick="multi_job_feedback(); $('#mass_notok').removeClass('target'); $('#mass_agree').removeClass('target'); $('#mass_notok_confirm').removeClass('target')"
          = t('jobstat.common.send')
        button class="btn-info" onClick="$('#mass_notok_confirm').removeClass('target');"
          = t('jobstat.common.not_send')
    a class="octo-close-popup" onClick="$('#mass_notok_confirm').removeClass('target'); return false"


div class="perf-table"
  /p
    | Sort by &nbsp;
    a class="btn btn-info sorting" data-column="8" data-direction="0" data-item="0" num nodes
    | &nbsp;
    a class="btn btn-info sorting" data-column="8" data-direction="0" data-item="1" duration
    | &nbsp;
    a class="btn btn-info sorting" data-column="8" data-direction="0" data-item="2" core*hours
  br
  input type="checkbox" class="hide-login-data" id="hide-login-checkbox" checked=1
  label for="hide-login-checkbox" = t('.hide_login')
  |  
  | &nbsp;
  | &nbsp;
  input type="checkbox" class="hide-perf-data" id="hide-perf-checkbox"
  label for="hide-perf-checkbox" = t('.hide_performance')

  h3
    - if @total_count==0
      = t('.no_such_tasks')
    - else
      = t('.shown_tasks')
      | #{@params[:offset]}..#{@params[:offset].to_i + @shown}
      = t('.of')
      | #{@total_count}
  p id="hidden_count"
  table
    tr
      td
        - if @params[:offset].to_i >= @PER_PAGE
          a href="#{url_for @params.except(:offset).merge(offset: @params[:offset].to_i - @PER_PAGE)}" <<<
      td width="10px"
      td
        - if @jobs.length == 100
          a href="#{url_for @params.except(:offset).merge(offset: @params[:offset].to_i + @PER_PAGE)}" >>>

  table id="jobs" class="table table-bordered tablesorter-default"
    thead
      tr id="table-header"
        th data-sorter="false"
          p
            |
        th data-sorter="false"
          p title="список потенциальных(sic!) проблем, возникших при работе приложения"
            = t('.problems_found')
        th
          p title="номер задачи в менеджере ресурсов (slurm)"
            = t('.task_id')
        th class="login-data"
          p title="#{t('.login_info')}"
            =t('.login')
        th class="login-data"
          p title="#{t('.partition_info')}"
            =t('.partition')
        th
          p title="#{t('.start_info')}"
            =t('.start_time')
        th
          p title="#{t('.end_info')}"
            = t('.end_time')
        th class="icon-x2-width"
          p title="#{t('.status_info')}"
            = t('.status')
        th
          p title="#{t('.nodes_info')}"
            = t('.nodes')
        th
          p title="#{t('.time_info')}"
            = t('.time')
        th
          p title="#{t('.task_size_info')}"
            = t('.task_size')
        th class="perf-data"
          p title="#{t('.cpu_info')}"
            = t('.cpu_load')
        th class="perf-data"
          p title="#{t('.gpu_info')}"
            =t('.gpu_load')
        th class="perf-data"
          p title="#{t('.la_info')}"
            = t('jobstat.common.la')
        th class="perf-data"
          p title="#{t('.mpi_rcv_info')}"
            = t('.mpi_rcv')
        th class="perf-data"
          p title="mpi_send_info"
            = t('.mpi_send')
    - index=0
    - @jobs.each do |job|
      - index+=1
      - job_performance = job.get_performance
      - job_ranking = job.get_ranking
      - if @fake_data==0
        - #job_cond = job.get_rules @current_user #@jobs_plus[job.drms_job_id]['rules']
        - job_cond = @jobs_plus[job.drms_job_id]['rules'].keys
        - perf_data_present=!job_performance[:cpu_user].nil?
        - row_id = job.drms_job_id
      - else
        - #job_cond = job.get_rules @current_user #@jobs_plus[job.drms_job_id]['rules']
        - job_cond = @jobs_plus[job.drms_job_id]['rules'].keys #['rule_anomaly']
        - perf_data_present = true
        - row_id = "fake_#{job.drms_job_id}"
      tr id="job_row_#{row_id}" data-jobid="#{job.drms_job_id}" data-info-state="#{perf_data_present ? 0 : -1}"
        td id=("fake_menu" if @fake_data!=0 && index==1)
          input type="checkbox" class="job_check" style="display: none;" data-job-id="#{job.drms_job_id}" onChange="job_check_clicked(#{job.drms_job_id})"
          a class="red-on-hover" onClick="$('#job_info_#{index}').addClass('target')" title="#{t('.rules_info')}" data-disable-interaction="1"
            i class="fas fa-bars"
          // feedback dropdown window
          div id="job_info_#{index}" class="octo-popup"
            a class="octo-popup-close" onClick="$('#job_info_#{index}').removeClass('target')"&times;
            - if perf_data_present
              - if job_cond.size > 0
                - job_cond.each do |cond|
                  div class="cond-div #{@filters.include?(cond) ? 'hidden' : 'visible'}" data-rule-div="#{cond}"
                    // current feedback icon
                    - feedback=@jobs_plus[job.drms_job_id]['feedback']
                    - flag_index = feedback.fetch('klass',99)
                    i id="af-#{job.drms_job_id}-#{cond}" class="#{@agree_flags[flag_index]}" title=("#{t('.no_feedback_yet')}" if flag_index==99)
                    /'fa-ok agreed-flag'
                    | &nbsp;
                    
                    // "hide rule" button
                    button class="btn-danger" onClick="popup_show('hide#{job.drms_job_id}_#{cond}','question_hide#{job.drms_job_id}_#{cond}');" title="#{t('.hide_rule_button')}" id=("fake_hide" if @fake_data!=0) data-disable-interaction="1"
                      i class="far fa-bell-slash"
                    | &nbsp; 

                    // "I disagree with rule" button
                    button class="btn-warning disagree-button" onClick="popup_show('disagree#{job.drms_job_id}_#{cond}','question_#{job.drms_job_id}_#{cond}');" title="#{t('.not_agree_button')}" id=("fake_not_ok" if @fake_data!=0) data-disable-interaction="1"
                      i class="#{@agree_flags[1]}"
                    | &nbsp; 
                    
                    button class="btn-warning" onClick="popup_show('agree#{job.drms_job_id}_#{cond}','question_#{job.drms_job_id}_#{cond}');" title="#{t('jobstat.common.agree_button')}" id=("fake_hide" if @fake_ok!=0) data-disable-interaction="1"
                      i class="#{@agree_flags[0]}"
                    | &nbsp; 
                    
                    // rule icon
                    - rule = @rules_plus['rules'].fetch(cond, nil)
                    - icon = rule ? group_plus.fetch(rule['group'],def_icon) : def_icon
                    a href="all_rules#go-#{cond}"
                      i class="em15 fa-fw align-left inline #{icon['icon']} #{icon['color']}" title="#{t('.rule_descr')}"
                    | &nbsp; 

                    = @rules_plus['rules'].fetch(cond,{}).fetch('description',t('.rule_error'))

                    // "why hide?" dialog
                    div class="octo-popup2 container" id="popup_hide#{job.drms_job_id}_#{cond}"
                        /div class="content container"
                        form onSubmit="popup_hide('hide#{job.drms_job_id}_#{cond}');hide_rule(#{job.drms_job_id},'#{cond}'); return false;"
                          div class="centered"
                            = t('.why_hide')
                          input type="text" id="question_hide#{job.drms_job_id}_#{cond}" class="fullwidth"
                          div class="centered col-12"
                            button class="btn-info" type="submit"
                              = t('.send')
                            button class="btn-info" onClick="return popup_hide('hide#{job.drms_job_id}_#{cond}');"
                              = t('.not_send')
                    a class="octo-close-popup2" onClick="return popup_hide('hide#{job.drms_job_id}_#{cond}');"


                    // "Disagree" dialog
                    div class="octo-popup2 container" id="popup_disagree#{job.drms_job_id}_#{cond}"
                      form onSubmit="popup_hide('disagree#{job.drms_job_id}_#{cond}');disagree('#{job.drms_job_id}','#{cond}',0); return false;"
                        div class="centered"
                          = t('.why_disagree')
                        input type="text" id="question_#{job.drms_job_id}_#{cond}" class="fullwidth"
                        div class="centered"
                          button class="btn-info" type="submit"
                            = t('.send')
                          button class="btn-info" onClick="return popup_hide('disagree#{job.drms_job_id}_#{cond}')"
                            = t('.not_send')
                    a class="octo-close-popup2" onClick="return popup_hide('disagree#{job.drms_job_id}_#{cond}')"

                    // 'Agree' dialog
                    div class="octo-popup2 container" id="popup_agree#{job.drms_job_id}_#{cond}"
                      form onSubmit="popup_hide('agree#{job.drms_job_id}_#{cond}'); agree('#{job.drms_job_id}','#{cond}',0,''); return false;"
                        div class="centered"
                          button class="btn-info" type="submit"
                            = t('jobstat.common.agree_rule')
                          button class="btn-info" onClick="return popup_hide('agree#{job.drms_job_id}_#{cond}')"
                            = t('jobstat.common.not_send')
                    a class="octo-close-popup2" onClick="return popup_hide('agree#{job.drms_job_id}_#{cond}')"
              - else
                i class="em2 fas fa-fw fa-check color-green"
                = t('.no_notices')
            - else
              p 
                = t('.no_task_info')
          a class="octo-close-popup" onClick="$('#job_info_#{index}').removeClass('target')"
        td id=("fake_cond" if @fake_data!=0 && index==1) data-disable-interaction="1"
          /- if @fake_data==1
            a href="#" class="em12 visible"
              i class="align-left fa fa-times-circle color-red inline cond-div" title="#{t('.anomaly_task_info')}" data-rule-div="rule_anomaly"
            |  
          - if perf_data_present
            - if job_cond.size > 0
              - hidden_count = (@fake_data==0 ? 0 : 2)
              - job_cond.each do |cond|
                - rule = @rules_plus['rules'].fetch(cond, nil)
                - icon = rule ? group_plus.fetch(rule['group'],def_icon) : def_icon
                - hidden_count+=1 if @filters.include?(cond)
                a href="all_rules#go-#{cond}" class="em12 #{@filters.include?(cond) ? 'hidden' : 'visible'}"
                  i class="fa-fw align-left #{icon['icon']} #{icon['color']} inline cond-div" title="#{@rules_plus['rules'].fetch(cond,{}).fetch('description','...')}" data-rule-div="#{cond}"
                |  
              - if hidden_count>0
                - hidden = @jobs_plus[job.drms_job_id]['filtered']
                span class="gray-text hidden_rules_count" data-id="#{job.drms_job_id}" title="#{t('.hidden_count')}" +#{@fake_data==0 ? hidden : 2}
            - else
              /= image_tag "ok.png", size: "20", border: 2
              i class="fas fa-fw fa-check em12 color-green" title="#{t('.no_marks')}"
          - else
            p 
              = t('.no_info')
        td id=("fake_id" if (index==1 && @fake_data!=0))
          - d="#{t('.more_task_info')} #{job.get_command}\nУзлы: #{job.nodelist}"
          p title="#{d}"
            i class="fa fa-hand-point-right gray-text"
            | &nbsp;
            = @fake_data==0 ? link_to(job.drms_job_id, job) : job.drms_job_id
        td class="login-data" = job.login
        td class="login-data" = job.partition
        td = job.start_time.strftime('%F %T')
        td = job.end_time.strftime('%F %T')
        td class="task_state_#{job.state} centered"
          = job.state.downcase
        td
          = job.num_nodes
        td
          = number_with_precision(job.get_duration_hours, :precision => 1)
        /td = number_with_precision(job.get_duration_hours, :precision => 1)

        /td = number_with_precision(job.get_cpuh, :precision => 1)

        /td = "🎖" * Math.log(job.num_nodes * (job.end_time - job.start_time) / 86400 + 2, 2).to_i

        - stars=Math.log(job.num_nodes * (job.end_time - job.start_time) / 86400 + 2, 2)
        - stars=4 if stars>4
        td
          i class="icon-signal-#{stars.to_i} em2 centered" data-stars="#{stars}"
          br
          = number_with_precision(job.get_cpuh, :precision => 1)

        td class="perf-data job_metric_#{job_ranking[:cpu_user]}"
          = number_with_precision(job_performance[:cpu_user], :precision => 1)

        td class="perf-data job_metric_#{job_ranking[:gpu_load]}"
          = number_with_precision(job_performance[:gpu_load], :precision => 1)

        td class="perf-data job_metric_#{job_ranking[:loadavg]}"
          = number_with_precision(job_performance[:loadavg], :precision => 1)

        td class="perf-data job_metric_#{job_ranking[:ib_rcv_data_mpi]}"
          = number_with_precision(job_performance[:ib_rcv_data_mpi], :precision => 1)

        td class="perf-data job_metric_#{job_ranking[:ib_xmit_data_mpi]}"
          = number_with_precision(job_performance[:ib_xmit_data_mpi], :precision => 1)

table
  tr
    td
      - if @params[:offset].to_i >= @PER_PAGE
        a href="#{url_for @params.except(:offset).merge(offset: @params[:offset].to_i - @PER_PAGE)}" <<< 
    td width="10px"
    td
      - if @jobs.length == 100
        a href="#{url_for @params.except(:offset).merge(offset: @params[:offset].to_i + @PER_PAGE)}" >>>

button onclick="startIntro()" id="intro-finish"
  = t('.intro_tour')

javascript:
  var jobs=#{{@jobs_plus.to_json}};
  var jobs_feedback=#{{@jobs_feedback.to_json}};
  var current_user=#{@current_user.id};
  var agree_flags=#{{@agree_flags.to_json}};
  var rules_plus=#{{@rules_plus.to_json}};
  var filters=#{{@filters.to_json}};
  var emails=#{{@emails.to_json}};
  var intro_finished=false;
  var feedback_url='#{{url_for ["account_list","feedback"]}}';

  var rule_pic_other = '<i class="fas fa-fw fa-exclamation-triangle" title="......"></i>'
  var intro_js_object;
  var start_intro = #{{@start_intro}};
  var fake_data = #{{@fake_data}};

  var intro_steps=[
        {
          element: '#intro-step1',
          intro: '#{{t(".intro-step1")}}',
        },
        {
          element: '#intro-step2',
          intro: '#{{t(".intro-step2")}}',
          position: 'bottom',
        },
        {
          element: '#intro-step3',
          intro: '#{{t(".intro-step3")}}',
        },
        {
          element: '#table-header', //'#job_row_fake_1',
          intro: '#{{t(".intro-step4")}}',
        },
        {
          element: '#fake_cond',
          intro: '#{{t(".intro-step5")}}',
        },
        {
          element: '#fake_menu',
          intro: '#{{t(".intro-step6a")}}#{{@agree_flags[1]}}#{{t(".intro-step6b")}}#{{@agree_flags[0]}}#{{t(".intro-step6c")}}',
        },
        {
          element: '#fake_id',
          intro: '#{{t(".intro-step7")}}',
        },
        {
          element: '#intro-finish',
          intro: '#{{t(".intro-finish")}}',
        },
      ]



  // {user:int, cluster: string, job_id: int, task_id: int, class=int, feedback=string},{...}
  $(function(){
    var len=filters.length;
    if (len>0) {
      $('#hidden_count').text("#{{t('.hidden_count_perf')}}"+len)
    }
    else {
      $('#hidden_count').text('#{{t(".no_perf_problems")}}')
    }
    // mark hidden rules
    filters.forEach(function(rule){
      $("#btn-hide-"+rule).addClass("tinted")
    })
    // mark disabled email notifications
    emails.forEach(function(rule){
      $("#btn-email-"+rule).addClass("tinted")
    })

    if(start_intro>0){
      startIntro(1);
    }
    else if (fake_data>=1){
      startIntro(4);
    }
    $("#_fake_data").val(#{@params[:fake_data].to_i > 0 ? 1 : 0});
  });

  function intro_change(new_element){
    var id=$(new_element).attr('id');
    var fake=$('#_fake_data').val()

    if(id=='intro-step3'){
      if(parseInt(fake)==0){
        $('#_fake_data').val("1");
        $('#intro-step2 > form').submit();
        return true;
      }
    }
    else if(id=='fake_cond'){
      $('#job_info_1').removeClass('target')
      intro_finished = true
    }
    else {
      $('#_fake_data').val("0");
    }
  }

  function startIntro(startStep){
    var intro = introJs();
    intro_js_object=intro;
    var step3text;
    var steps=[]

    if(startStep==undefined){
      startStep=1
    }

    intro.onbeforechange(intro_change)
    .setOptions({
      steps: intro_steps
    })
    .onbeforeexit(function () {
      if(intro_finished){
        window.open("#{{url_for(action: 'index', controller: 'account_list',only_path: false)}}","_self")
        return true;
      }
      var answer=confirm("#{{t('.finish_tour')}}");
      if(answer){
        $('#_fake_data').val(0)
        $('#start_time').val('')
        $('#end_time').val('')
        window.open("#{{url_for(action: 'index', controller: 'account_list',only_path: false, protocol: 'https')}}","_self")
      }
      return answer;
    }).start().goToStepNumber(startStep);
  }
