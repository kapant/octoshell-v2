div
  h1 = t('.jobs_statisctics')

  = render "form"

br
h2 = "Навигация"
h4 = "Хронология"
ul
  li
    h5
      <a href="#stat_01" id="back">Статусы</a>
  li
    h5
      <a href="#stat_02" id="back">Логины</a>
  - if User.superadmins.include?(current_user)
    li
      h5
        <a href="#stat_03" id="back">Проекты</a>

h4 = "Топы"
ul
  - if User.superadmins.include?(current_user)
    li
      h5
        <a href="#stat_04" id="back">Проекты</a>
    li
      h5
        <a href="#stat_05" id="back">Пользователи</a>
  li
    h5
      <a href="#stat_06" id="back">Логины</a>
br


div id="stat_01"
  br
  h2 = "Хронология статусов"

  br
  div id="stacked-bar-1-chart" style={:width=>"550px"}
  div id="stacked-bar-1-legend"

  br

  br
  div id="stacked-bar-2-chart"
  div id="stacked-bar-2-legend"

  br

div id="stat_02"
  br
  h2 = "Хронология логинов"

  br
  div id="stacked-bar-3-chart"
  div id="stacked-bar-3-legend"

  br

  br
  div id="stacked-bar-4-chart"
  div id="stacked-bar-4-legend"

  br

div id="stat_03"
  - if User.superadmins.include?(current_user)
    br
    h2 = "Хронология проектов"

    br
    div id="stacked-bar-5-chart"
    div id="stacked-bar-5-legend"

    br

    br
    div id="stacked-bar-6-chart"
    div id="stacked-bar-6-legend"

    br

div id="stat_04"
  - if User.superadmins.include?(current_user)
    br
    h2 = "Топ проектов"

    br
    div id="stacked-bar-7-chart"
    div id="stacked-bar-7-legend"

    br

    br
    div id="stacked-bar-8-chart"
    div id="stacked-bar-8-legend"

    br

    br
    div id="stacked-bar-9-chart"
    div id="stacked-bar-9-legend"

    br

    br
    div id="stacked-bar-10-chart"
    div id="stacked-bar-10-legend"

    br

div id="stat_06"
  br
  h2 = "Топ логинов"

  br
  div id="stacked-bar-11-chart"
  div id="stacked-bar-11-legend"

  br

  br
  div id="stacked-bar-12-chart"
  div id="stacked-bar-12-legend"

  br

div id="stat_05"
  - if User.superadmins.include?(current_user)
    br
    h2 = "Топ пользователей"

    br
    div id="stacked-bar-13-chart"
    div id="stacked-bar-13-legend"

    br

    br
    div id="stacked-bar-14-chart"
    div id="stacked-bar-14-legend"

    br

    br
    div id="stacked-bar-15-chart"
    div id="stacked-bar-15-legend"

    br

    br
    div id="stacked-bar-16-chart"
    div id="stacked-bar-16-legend"

javascript:
  var formatting = #{{@formatting.to_json}};
  format = formatting;

  function drawCartesianChart(data, chart_id, legend_id, title, yLabel) {
      var chart = new Cartesian(chart_id);
      chart.data.isStacked = true;
      chart.bars.visible = true;
      chart.lines.visible = false;
      chart.bars.hasOpacity = true;
      chart.plot.title = title;
      chart.plot.yLabel = yLabel;
      chart.plot.xLabel = "";
      chart.draw(data);
      var legend = new Legend(legend_id);
      legend.hasOpacity = true;
      legend.draw(data);
  }

  function drawCartesianOrdinalChart(data, chart_id, legend_id, title, yLabel) {
      var chart = new Cartesian(chart_id);
      chart.xAxisType = 'ordinal';
      chart.data.isStacked = true;
      chart.bars.visible = true;
      chart.lines.visible = false;
      chart.bars.hasOpacity = true;
      chart.plot.title = title;
      chart.plot.yLabel = yLabel;
      chart.plot.xLabel = "";
      chart.draw(data);
      var legend = new Legend(legend_id);
      legend.hasOpacity = true;
      legend.draw(data);
  }

  var data1 = #{{@state_runs.to_json}};
  console.log("Data1: ", data1);
  drawCartesianChart(
      data1, 
      "#stacked-bar-1-chart", 
      "#stacked-bar-1-legend", 
      "Хронология статусов", 
      "Количество запусков"
  );

  var data2 = #{{@state_resources.to_json}};
  console.log("Data2: ", data2);
  drawCartesianChart(
      data2, 
      "#stacked-bar-2-chart", 
      "#stacked-bar-2-legend", 
      "Хронология статусов", 
      "Объем ресурсов"
  );

  var data3 = #{{@login_runs.to_json}};
  console.log("Data3: ", data3);
  drawCartesianChart(
      data3, 
      "#stacked-bar-3-chart", 
      "#stacked-bar-3-legend", 
      "Хронология логинов", 
      "Количество запусков"
  );

  var data4 = #{{@login_resources.to_json}};
  console.log("Data4: ", data4);
  drawCartesianChart(
      data4, 
      "#stacked-bar-4-chart", 
      "#stacked-bar-4-legend", 
      "Хронология логинов", 
      "Объем ресурсов"
  );

  var data5 = #{{@project_runs.to_json}};
  console.log("Data5: ", data5);
  drawCartesianChart(
      data5, 
      "#stacked-bar-5-chart", 
      "#stacked-bar-5-legend", 
      "Хронология проектов", 
      "Количество запусков"
  );

  var data6 = #{{@project_resources.to_json}};
  console.log("Data6: ", data6);
  drawCartesianChart(
      data6, 
      "#stacked-bar-6-chart", 
      "#stacked-bar-6-legend", 
      "Хронология проектов", 
      "Объем ресурсов"
  );
  
  var data7 = #{{@top_project_state_runs.to_json}};
  console.log("Data7: ", data7);
  drawCartesianOrdinalChart(
      data7, 
      "#stacked-bar-7-chart", 
      "#stacked-bar-7-legend", 
      "Топ проектов по статусам", 
      "Количество запусков"
  );

  var data8 = #{{@top_project_state_resources.to_json}};
  console.log("Data8: ", data8);
  drawCartesianOrdinalChart(
      data8, 
      "#stacked-bar-8-chart", 
      "#stacked-bar-8-legend", 
      "Топ проектов по статусам", 
      "Объем ресурсов"
  );

  var data9 = #{{@top_project_login_runs.to_json}};
  console.log("Data9: ", data9);
  drawCartesianOrdinalChart(
      data9, 
      "#stacked-bar-9-chart", 
      "#stacked-bar-9-legend", 
      "Топ проектов по логинам", 
      "Количество запусков"
  );

  var data10 = #{{@top_project_login_resources.to_json}};
  console.log("Data10: ", data10);
  drawCartesianOrdinalChart(
      data10, 
      "#stacked-bar-10-chart", 
      "#stacked-bar-10-legend", 
      "Топ проектов по логинам", 
      "Объем ресурсов"
  );

  var data11 = #{{@top_login_state_runs.to_json}};
  console.log("Data11: ", data11);
  drawCartesianOrdinalChart(
      data11, 
      "#stacked-bar-11-chart", 
      "#stacked-bar-11-legend", 
      "Топ логинов по статусам", 
      "Количество запусков"
  );

  var data12 = #{{@top_login_state_resources.to_json}};
  console.log("Data12: ", data12);
  drawCartesianOrdinalChart(
      data12, 
      "#stacked-bar-12-chart", 
      "#stacked-bar-12-legend", 
      "Топ логинов по статусам", 
      "Объем ресурсов"
  );

  var data13 = #{{@top_user_state_runs.to_json}};
  console.log("Data13: ", data13);
  drawCartesianOrdinalChart(
      data13, 
      "#stacked-bar-13-chart", 
      "#stacked-bar-13-legend", 
      "Топ пользователей по статусам", 
      "Количество запусков"
  );

  var data14 = #{{@top_user_state_resources.to_json}};
  console.log("Data14: ", data14);
  drawCartesianOrdinalChart(
      data14, 
      "#stacked-bar-14-chart", 
      "#stacked-bar-14-legend", 
      "Топ пользователей по статусам", 
      "Объем ресурсов"
  );

  var data15 = #{{@top_user_login_runs.to_json}};
  console.log("Data15: ", data15);
  drawCartesianOrdinalChart(
      data15, 
      "#stacked-bar-15-chart", 
      "#stacked-bar-15-legend", 
      "Топ пользователей по логинам", 
      "Количество запусков"
  );

  var data16 = #{{@top_user_login_resources.to_json}};
  console.log("Data16: ", data16);
  drawCartesianOrdinalChart(
      data16, 
      "#stacked-bar-16-chart", 
      "#stacked-bar-16-legend", 
      "Топ пользователей по логинам", 
      "Объем ресурсов"
  );

div
  br
  h1 = t('.total')
  javascript:
    var temp1 = JSON.parse("#{@data.to_json}".replace(/&quot;/g, '"'));
    console.log(temp1);
    var data = {"name": "launches", "children": []};
    var data1 = {"name": "launches", "children": []};
    var data2 = {"name": "launches", "children": []};
    var data3 = {"name": "launches", "children": []};

    var i = 0;
    for (key in temp1) {
      data.children.push({"name": key, "children": []});
      data1.children.push({"name": key, "children": []});
      var j = 0;
      for (key1 in temp1[key]) {
            data.children[i].children.push({"name": key1, "children": []});
            data1.children[i].children.push({"name": key1, "children": []});
            for (key2 in temp1[key][key1]) {
              data.children[i].children[j].children.push({"name": key2, "size": temp1[key][key1][key2][0]});
              data1.children[i].children[j].children.push({"name": key2, "size": temp1[key][key1][key2][1]});
            }
            j++;
      }
      i++;
    }
    var temp2 = {};
    for (key in temp1) {
      for (key1 in temp1[key]) {
        for (key2 in temp1[key][key1]) {
          if (typeof(temp2[key2]) == "undefined") {
            temp2[key2] = {};
          }
          if (typeof(temp2[key2][key]) == "undefined") {
            temp2[key2][key] = {};
          }
          if (typeof(temp2[key2][key][key1]) == "undefined") {
            temp2[key2][key][key1] = [0, 0, 0];
          }
          temp2[key2][key][key1][0] += temp1[key][key1][key2][0];
          temp2[key2][key][key1][1] += temp1[key][key1][key2][1];
          temp2[key2][key][key1][2] += temp1[key][key1][key2][2];
        }
      }
    }
    i = 0;
    for (key in temp2) {
      data2.children.push({"name": key, "children": []});
      data3.children.push({"name": key, "children": []});
      var j = 0;
      for (key1 in temp2[key]) {
            data2.children[i].children.push({"name": key1, "children": []});
            data3.children[i].children.push({"name": key1, "children": []});
            for (key2 in temp2[key][key1]) {
              data2.children[i].children[j].children.push({"name": key2, "size": temp2[key][key1][key2][0]});
              data3.children[i].children[j].children.push({"name": key2, "size": temp2[key][key1][key2][1]});
            }
            j++;
      }
      i++;
    }

    width = 1150;
    radius = width / 16;
    format = d3.format(",d");
    arc = d3.arc()
            .startAngle(d => d.x0)
            .endAngle(d => d.x1)
            .padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.02))
            .padRadius(radius * 1.5)
            .innerRadius(function(d) {
              if (d.y0 < 1.5) {
                return d.y0 * radius * 0.8;
              } else if (d.y0 < 2.5) {
                return d.y0 * radius * 1.07;
              }
              return d.y0 * radius * 1.03;
            })
            .outerRadius(function(d) {
              if (d.y0 < 1.5) {
                return d.y1 * radius * 1.07 - 1;
              } else if (d.y0 < 2.5) {
                return d.y1 * radius * 1.03 - 1;
              }
              return d.y1 * radius - 1;
            })

    // functions
    function partition(data, labels) {
        const root = d3.hierarchy(data)
                      .sum(d => d.size)
                      .sort((a, b) => b.value - a.value);
        return d3.partition().size([2 * Math.PI, root.height + 1])(root);
    }

    function arcVisible(d) {
    return d.y1 <= 4 && d.y0 >= 1 && d.x1 > d.x0;
    }

    function labelVisible(d) {
    return d.y1 <= 4 && d.y0 >= 1 && (d.y1 - d.y0) * (d.x1 - d.x0) > 0.03;
    }

    function labelTransform(d) {
    const x = (d.x0 + d.x1) / 2 * 180 / Math.PI;
    var y;
    if (d.y0 < 1.5) {
      y = (d.y0 + d.y1) / 2 * radius * 0.94 - 1;
    } else if (d.y0 < 2.5) {
      y = (d.y0 + d.y1) / 2 * radius * 1.05 - 1;
    } else {
      y = (d.y0 + d.y1) / 2 * radius * 1.01 - 1;
    }
    return `rotate(${x - 90}) translate(${y},0) rotate(${x < 180 ? 0 : 180})`;
    }

    function total_count(data) {
      var sum = 0;
      if (typeof(data.children[0].size) != "undefined") {
        for (x in data.children) {
          sum += data.children[x].size;
        }
        return sum;
      }
      for (x in data.children) {
        sum += total_count(data.children[x]);
      }
      return Math.ceil(100 * sum) / 100;
    }

    var COLORS = {"COMPLETED": "#aff05b", "CANCELLED": "cyan", "FAILED": "red", "TIMEOUT": "purple"}

    function draw(svg, data, labels, x, y, type) {
        const root = partition(data);
        color = d3.scaleOrdinal().range(d3.quantize(d3.interpolateRainbow, data.children.length + 1));

        external_color = d3.scaleOrdinal().range(d3.quantize(d3.interpolateRainbow, data.children[0].children.length + 1));
        var bord = 2;
        if (type == "external") {
          external_color = d3.scaleOrdinal().range(d3.quantize(d3.interpolateRainbow, data.children[0].children[0].children.length + 1));
          var bord = 3;
        }

        root.each(d => d.current = d);

        const g = svg.append("g")
          .attr("transform", `translate(${x},${y})`);

        const path = g.append("g")
        .selectAll("path")
        .data(root.descendants().slice(1))
        .enter().append("path")
          .attr("fill", function(d) {
            if (d.data.name in COLORS) {
              return COLORS[d.data.name];
            }
            if (d.depth >= bord) {
              while (d.depth > bord) d = d.parent; 
              return external_color(d.data.name);
            }
            while (d.depth > 1) d = d.parent;
            return color(d.data.name);
          })
          .attr("fill-opacity", d => arcVisible(d.current) ? (d.children ? 0.6 : 0.4) : 0)
          .attr("d", d => arc(d.current));

        path.filter(d => d.children)
          .style("cursor", "pointer")
          .on("click", clicked);

        path.append("title")
          .text(d => `${d.ancestors().map(d => d.data.name).reverse().join("/")}\n${format(d.value)}`);

        const label = g.append("g")
          .attr("pointer-events", "none")
          .attr("text-anchor", "middle")
          .style("background-color", "white")
          .style("user-select", "none")
        .selectAll("text")
        .data(root.descendants().slice(1))
        .enter().append("text")
          .attr("id", d => "label" + d.depth)
          .attr("dy", "0.35em")
          .attr("fill-opacity", d => +labelVisible(d.current))
          .attr("transform", d => labelTransform(d.current))
          .text(d => d.data.name);

        const parent = g.append("circle")
          .datum(root)
          .attr("r", radius)
          .attr("fill", "none")
          .attr("pointer-events", "all")
          .on("click", clicked);

        var label1 = g.append("text")
                      .attr("text-anchor", "middle")
                      .attr("transform", "translate(0, -11)")
                      .style("font-size", "14px")
                      .text(labels[0]);
        var label2 = g.append("text")
                      .attr("text-anchor", "middle")
                      .attr("transform", "translate(0, 4)")
                      .style("font-size", "14px")
                      .text(labels[1]);
        var label3 = g.append("text")
                      .attr("text-anchor", "middle")
                      .attr("transform", "translate(0, 19)")
                      .style("font-size", "14px")
                      .text(total_count(data) + " total");

        function clicked(p) {
          parent.datum(p.parent || root);

          root.each(d => d.target = {
            x0: Math.max(0, Math.min(1, (d.x0 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,
            x1: Math.max(0, Math.min(1, (d.x1 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,
            y0: Math.max(0, d.y0 - p.depth),
            y1: Math.max(0, d.y1 - p.depth)
          });

          const t = g.transition().duration(750);

          // Transition the data on all arcs, even the ones that aren’t visible,
          // so that if this transition is interrupted, entering arcs will start
          // the next transition from the desired position.
          path.transition(t)
              .tween("data", d => {
                const i = d3.interpolate(d.current, d.target);
                return t => d.current = i(t);
              })
            .filter(function(d) {
              return +this.getAttribute("fill-opacity") || arcVisible(d.target);
            })
              .attr("fill-opacity", d => arcVisible(d.target) ? (d.children ? 0.6 : 0.4) : 0)
              .attrTween("d", d => () => arc(d.current));

          label.filter(function(d) {
              return +this.getAttribute("fill-opacity") || labelVisible(d.target);
            }).transition(t)
              .attr("fill-opacity", d => +labelVisible(d.target))
              .attrTween("transform", d => () => labelTransform(d.current));
        }
    }

    function label_click() {
      var label_id = d3.select(this).attr("label");
      d3.selectAll("text")
        .filter(function() {
          return d3.select(this).attr("id") == label_id;
        })
        .style("opacity", function() {
          return (+d3.select(this).style("opacity") + 1) % 2;
        });
    }

    window.onload = function() {
        buttons = d3.selectAll("div")
                .filter(function() {
                  return d3.select(this).attr("id") == "svg";
                })
                .append("g");
        
        buttons.append("div")
              .text("Internal labels")
              .attr("label", "label1")
              .attr("class", "button")
              .style("background", "#6699CC")
              .style("float", "left")
              .on("click", label_click);

        buttons.append("div")
              .text("Middle labels")
              .attr("label", "label2")
              .attr("class", "button")
              .style("background", "#6699CC")
              .style("float", "left")
              .on("click", label_click);

        buttons.append("div")
              .text("External labels")
              .attr("label", "label3")
              .attr("class", "button")
              .style("background", "#6699CC")
              .style("float", "left")
              .on("click", label_click);

        //svg
        const svg = d3.selectAll("div")
                    .filter(function() {
                      return d3.select(this).attr("id") == "svg";
                    })
                    .append("svg")
                    .style("width", width)
                    .style("height", width)
                    .style("font", "10px sans-serif");

        // data
        draw(svg, data, ["jobs", "by systems"], width / 4, width / 4, "external");

        // data1
        draw(svg, data1, ["core hours", "by systems"], 3 * width / 4, width / 4, "external");

        // data2
        draw(svg, data2, ["jobs", "by status"], width / 4, 3 * width / 4);

        // data3
        draw(svg, data3, ["core hours", "by status"], 3 * width / 4, 3 * width / 4);

        

        return svg.node();
    };

  table class="tablesorter-blue"
    thead
      tr
        td style="width: 50%" = t('.supercomputer')
        td = t('.count')
        td = t('.cpu')
        td = t('.gpu')
    tbody
      - @total_cluster_data.each do |cluster, value|
        tr
          td = cluster.name
          td = value[0]
          td = value[1]
          td = value[2]
      tr
        td = t('.total')
        td = @total_data[0]
        td = @total_data[1]
        td = @total_data[2]

  - @data.keys.each do |cluster|
    h1 = cluster.name
    table class="tablesorter-blue"
      thead
        tr
          td style="width: 25%" = t('.partition')
          td style="width: 25%" = t('.status')
          td = t('.count')
          td = t('.cpu')
          td = t('.gpu')
      tbody
        - @data[cluster].keys.each do |partition|
          - @data[cluster][partition].keys.each_with_index do |state, index|
            tr
              - if index == 0
                td rowspan = @data[cluster][partition].keys.length #{partition}
              td = "#{state}"
              td = @data[cluster][partition][state][0]
              td = @data[cluster][partition][state][1]
              td = @data[cluster][partition][state][2]

  div id = "svg"